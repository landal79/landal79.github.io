{"data":{"site":{"siteMetadata":{"title":"Coding Illusions","author":"Alex Landini"}},"markdownRemark":{"id":"2926af9a-2f3c-5a8e-b4b2-0aa5773697b9","excerpt":"The first thing we learn as we approach computer science are algorithms,\nthere are various definition of algorithms but I like the  merriam-webster {:target…","html":"<p>The first thing we learn as we approach computer science are algorithms,\nthere are various definition of algorithms but I like the <a href=\"http://www.merriam-webster.com/dictionary/algorithm\">merriam-webster</a>{:target=“_blank”} one:</p>\n<blockquote>\n<p>a procedure for solving a mathematical problem (as of finding the greatest common divisor) in a finite number of steps that frequently involves repetition of an operation; broadly :  a step-by-step procedure for solving a problem or accomplishing some end especially by a computer</p>\n</blockquote>\n<p>I would like to highlight the word <strong>problem</strong>,\nso programming is about problem solving.\nIn my opinion problem solving include two parts:</p>\n<ul>\n<li>Understanding the problem</li>\n<li>Solving the problem</li>\n</ul>\n<p>According to <a href=\"http://www.codeproject.com/Articles/858726/Problem-Solving-for-Software-Engineers\">Problem Solving for Software Engineers</a>{:target=“_blank”} there are four phases:</p>\n<blockquote>\n<ul>\n<li>Understanding the problem</li>\n<li>Devising the plan</li>\n<li>Carrying out the plan</li>\n<li>Retrospection</li>\n</ul>\n</blockquote>\n<h3>Understanding the problem</h3>\n<p>This could seem pretty obvious but often we start programming without thinking deeply about the problem we are trying to solve, as result we code is creep.</p>\n<h3>Improve problem solving skills</h3>\n<p>What us as developers should do, it’s to improve a little our problem solving skills everyday.</p>\n<p>There are a multitude of way to improve problem solving skills as:</p>\n<ul>\n<li>randomly try something</li>\n<li>read random articles/blogs/posts about the topic I am concerned with (or a closely connected topic)</li>\n<li>making a nice drawing</li>\n<li>split the problem into multiple but simpler problems (The never died <strong>divide and conquer technique</strong>)</li>\n<li>do something else</li>\n<li>Google something that is related in some way to the problem</li>\n<li>talk to others about the problem</li>\n<li>make a TODO list</li>\n<li>write down stuff you know about the problem’s effect so you can more easily find patterns</li>\n</ul>\n<h3>References</h3>\n<ul>\n<li><a href=\"http://www.codeproject.com/Articles/858726/Problem-Solving-for-Software-Engineers\">Problem Solving for Software Engineers</a>{:target=“_blank”}</li>\n</ul>","frontmatter":{"title":"Programming is problem solving","date":null,"description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/programming-is-problem-solving/programming-is-problem-solving/","previous":{"fields":{"slug":"/anti-if-patterns-enums/"},"frontmatter":{"title":"Anti-if patterns: Enums"}},"next":{"fields":{"slug":"/clean-code-functions/"},"frontmatter":{"title":"Clean code: Functions"}}}}